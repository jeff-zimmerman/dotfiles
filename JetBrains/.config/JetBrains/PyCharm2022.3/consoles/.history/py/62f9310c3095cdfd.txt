import pickle
-. . -..- - / . -. - .-. -.--
pickle.load('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/run_dir_regression/args_regression.pkl')
-. . -..- - / . -. - .-. -.--
with open('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/run_dir_regression/args_regression.pkl0', 'r') as f:
    pickle.load(f)
    
-. . -..- - / . -. - .-. -.--
with open('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/run_dir_regression/args_regression.pkl', 'r') as f:
    pickle.load(f)
    
-. . -..- - / . -. - .-. -.--
with open('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/run_dir_regression/args_regression.pkl', 'rb') as f:
    pickle.load(f)
    
-. . -..- - / . -. - .-. -.--
with open('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/run_dir_regression/args_regression.pkl', 'rb') as f:
    args = pickle.load(f)
    
-. . -..- - / . -. - .-. -.--
args
-. . -..- - / . -. - .-. -.--
def id_elms(elm_predictions):

    ids = np.empty((len(elm_predictions), 3))
    for i, elm in enumerate(elm_predictions.values()):
        ch_22 = elm['signals'][:, 2, 5]
        p_elm = ch_22[elm['labels']==0]
        a_elm = ch_22[elm['labels']==1]

        id = [
            np.std(p_elm),
            np.max(ch_22),
            np.min(ch_22)
        ]

        ids[i, :] = id

    return ids

-. . -..- - / . -. - .-. -.--
def id_elms(elm_predictions):

    ids = np.empty((len(elm_predictions), 3))
    for i, elm in enumerate(elm_predictions.values()):
        ch_22 = elm['signals'][:, 2, 5]
        p_elm = ch_22[elm['labels']==0]
        a_elm = ch_22[elm['labels']==1]

        id = [
            np.std(p_elm),
            np.max(ch_22),
            np.min(ch_22)
        ]

        ids[i, :] = id

    for i in range(ids.shape[-1]):
        ids[:, i] = (ids[:, i] - ids[:, i].min()) / (ids[:, i].max() - ids[:, i].min())

    return ids

-. . -..- - / . -. - .-. -.--
def id_elms(elm_predictions):

    ids = np.empty((len(elm_predictions), 3))
    for i, elm in enumerate(elm_predictions.values()):
        ch_22 = elm['signals'][:, 2, 5]
        p_elm = ch_22[elm['labels']==0]
        a_elm = ch_22[elm['labels']==1]

        id = [
            np.std(p_elm),
            np.max(ch_22),
            np.min(ch_22)
        ]

        ids[i, :] = id

    for i in range(ids.shape[-1]):
        if ids[:, i].max() != ids[:, i].min():
            ids[:, i] = (ids[:, i] - ids[:, i].min()) / (ids[:, i].max() - ids[:, i].min())
        else:
            ids[:, i] = 1

    return ids

-. . -..- - / . -. - .-. -.--
id_elms(elm_predictions)
-. . -..- - / . -. - .-. -.--
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)

    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)

-. . -..- - / . -. - .-. -.--
def dendrogram(ids):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model.fit(ids)

    plt.title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, truncate_mode="level", p=3)
    plt.xlabel("Number of points in node (or index of point if no parenthesis).")
    plt.show()

-. . -..- - / . -. - .-. -.--
from elm_prediction.analyze import calc_inference
from elm_prediction.options.test_arguments import TestArguments
from pathlib import Path
import numpy as np
import pickle
import torch
from scipy.cluster.hierarchy import dendrogram
from sklearn.cluster import AgglomerativeClustering
from elm_prediction import package_dir
import matplotlib.pyplot as plt
from elm_prediction.src import utils

-. . -..- - / . -. - .-. -.--
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)

    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix)

-. . -..- - / . -. - .-. -.--
dendrogram(ids)
-. . -..- - / . -. - .-. -.--
x = dendrogram(ids)
-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model.fit(ids)

    plt.title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, truncate_mode="level", p=3)
    plt.xlabel("Number of points in node (or index of point if no parenthesis).")
    plt.show()

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    plt.title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, truncate_mode="level", p=3)
    plt.xlabel("Number of points in node (or index of point if no parenthesis).")
    plt.show()

-. . -..- - / . -. - .-. -.--
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)
    return linkage_matrix
    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, ax=None):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not ax:
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, truncate_mode="level", p=3, ax=ax)
    ax.set_xlabel("Number of points in node (or index of point if no parenthesis).")
    plt.show()

-. . -..- - / . -. - .-. -.--
x = make_dendrogram(ids)
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# f1 = []
# for elm in elm_predictions.values():
#     f1.append(f1_score(elm['labels'], elm['micro_predictions']))
x = make_dendrogram(ids, ax)
plt.show()

-. . -..- - / . -. - .-. -.--
from elm_prediction.analyze import calc_inference
from elm_prediction.options.test_arguments import TestArguments
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
import pickle
import torch
from scipy.cluster.hierarchy import dendrogram
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import f1_score
from elm_prediction import package_dir
import matplotlib.pyplot as plt
from elm_prediction.src import utils

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], elm['micro_predictions']))
x = make_dendrogram(ids, ax)
plt.show()

-. . -..- - / . -. - .-. -.--
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)
    print(linkage_matrix)
    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
x = make_dendrogram(ids, ax)
plt.show()

-. . -..- - / . -. - .-. -.--
x.xticklabels
-. . -..- - / . -. - .-. -.--
ax
-. . -..- - / . -. - .-. -.--
ax.xtick_labels()
-. . -..- - / . -. - .-. -.--
[x[-1] for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[x.text for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[x.label for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[int(x.get_text()) for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
def id_elms(elm_predictions):

    ids = np.empty((len(elm_predictions), 3))
    for i, elm in enumerate(elm_predictions.values()):
        ch_22 = elm['signals'][:, 2, 5]
        p_elm = ch_22[elm['labels']==0]
        a_elm = ch_22[elm['labels']==1]

        id = [
            np.std(p_elm),
            np.max(ch_22),
            np.min(ch_22)
        ]

        ids[i, :] = id

    # normalize between 0 and 1
    for i in range(ids.shape[-1]):
        if ids[:, i].max() != ids[:, i].min():
            ids[:, i] = (ids[:, i] - ids[:, i].min()) / (ids[:, i].max() - ids[:, i].min())
        else:
            ids[:, i] = 1

    return ids

-. . -..- - / . -. - .-. -.--
def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack(
        [model.children_, model.distances_, counts]
    ).astype(float)
    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, ax=None):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not ax:
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, truncate_mode="level", p=3, ax=ax)
    ax.set_xlabel("Number of points in node (or index of point if no parenthesis).")

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_loc = [int(x.get_text()) for x in ax.get_xticklabels()]

ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_order, tick_locations)))

ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

print(elm_idxs, elm_loc)
ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

print(elm_idxs, elm_loc)
ax.get_xticklabels()
ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

print(elm_idxs, elm_loc)
print(ax.get_xticklabels())
ax.bar(elm_loc, f1)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

ax.bar(elm_loc, f1, width=10 alpha=0.5)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

ax.bar(elm_loc, f1, width=10, alpha=0.5)

plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(x.get_text()) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

ax.bar(elm_loc, f1, width=np.diff(tick_locations).min(), alpha=0.5)

plt.show()

-. . -..- - / . -. - .-. -.--
runfile('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/train_regression.py', wdir='/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work')
-. . -..- - / . -. - .-. -.--
runfile('/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work/dendrogram.py', wdir='/home/jazimmerman/PycharmProjects/bes-edgeml-models/bes-edgeml-work')
-. . -..- - / . -. - .-. -.--
[int(x.get_text().find(r'\d+')) for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[x.get_text().find(r'\d+') for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[x.get_text() for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
y = '234'
-. . -..- - / . -. - .-. -.--
y.find(r'd+')
-. . -..- - / . -. - .-. -.--
y.find(r'\d+')
-. . -..- - / . -. - .-. -.--
y.match(r'\d+')
-. . -..- - / . -. - .-. -.--
re.find(r'\d+', y)
-. . -..- - / . -. - .-. -.--
import re
-. . -..- - / . -. - .-. -.--
re.find_all(r'\d+', y)
-. . -..- - / . -. - .-. -.--
re.__dict__
-. . -..- - / . -. - .-. -.--
re.__dict__.get('findall')
-. . -..- - / . -. - .-. -.--
re.search(r'\d+', y)
-. . -..- - / . -. - .-. -.--
re.match(r'\d+', y)
-. . -..- - / . -. - .-. -.--
re.findall(r'\d+', y)
-. . -..- - / . -. - .-. -.--
ax.get_xticks()
-. . -..- - / . -. - .-. -.--
[int(re.findall(r'\d+', x.get_text())[0]) for x in ax.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
ax.get_xticklabels()
-. . -..- - / . -. - .-. -.--
plt.show()
-. . -..- - / . -. - .-. -.--
model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
model = model.fit(ids)
-. . -..- - / . -. - .-. -.--
counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count
        
-. . -..- - / . -. - .-. -.--
counts = np.zeros(model.children_.shape[0])
n_samples = len(model.labels_)
for i, merge in enumerate(model.children_):
    current_count = 0
    for child_idx in merge:
        if child_idx < n_samples:
            current_count += 1  # leaf node
        else:
            current_count += counts[child_idx - n_samples]
    counts[i] = current_count
        
-. . -..- - / . -. - .-. -.--
with open(Path(__file__)/'run_dir_classification/elm_predictions.pkl', 'w+b') as f:
    pickle.dump(elm_predictions, f)
    
-. . -..- - / . -. - .-. -.--
with open(Path(__file__).parent/'run_dir_classification/elm_predictions.pkl', 'w+b') as f:
    pickle.dump(elm_predictions, f)
    
-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, ax=None):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not ax:
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, ax=ax)
    ax.set_xlabel("Number of points in node (or index of point if no parenthesis).")

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
ax.bar(elm_loc, f1, width=np.diff(tick_locations).min(), alpha=0.5)

plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
ax.get_ylim()
-. . -..- - / . -. - .-. -.--
ax.get_ylim()[-1]
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
ax.bar(elm_loc, f1*ax.get_ylim()[-1], width=np.diff(tick_locations).min(), alpha=0.5)

plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
ax.bar(elm_loc, f1*ax.get_ylim()[-1], width=np.diff(tick_locations).min(), alpha=0.5)

plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)

# make dendrogram
make_dendrogram(ids, ax)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax.get_xticklabels()]
tick_locations = ax.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
ax.bar(elm_loc, f1*ax.get_ylim()[-1], width=np.diff(tick_locations).min(), alpha=0.5)

# Configure plot
ax.grid(False)

plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), alpha=0.5)

# Configure plot
ax.grid(False)

plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
ax2.color()
-. . -..- - / . -. - .-. -.--
ax2.get_fc()
-. . -..- - / . -. - .-. -.--
ax2.get_color()
-. . -..- - / . -. - .-. -.--
ax2[0]
-. . -..- - / . -. - .-. -.--
ax2.lines[-1].get_color()
-. . -..- - / . -. - .-. -.--
ax2.lines.get_color()
-. . -..- - / . -. - .-. -.--
ax2[0].get_color()
-. . -..- - / . -. - .-. -.--
ax2.lines[0].get_color()
-. . -..- - / . -. - .-. -.--
len(ax2.lines)
-. . -..- - / . -. - .-. -.--
ax2.lines
-. . -..- - / . -. - .-. -.--
ax2.bars
-. . -..- - / . -. - .-. -.--
ax2.bar
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, z)
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_axisbelow(True)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', labelcolor=color)
ax2.set_axisbelow(True)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax1, zorder=3)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, **kwargs):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not (ax:=kwargs.pop('ax', None)):
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, ax=ax, **kwargs)
    ax.set_xlabel("Number of points in node (or index of point if no parenthesis).")

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1, zorder=3)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=-1)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=-10)
ax2.tick_params(axis='y', labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=-10)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, **kwargs):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not (ax:=kwargs.pop('ax', None)):
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram of ELM Feature Distance")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, ax=ax, **kwargs)
    ax.set_xlabel("ELM Indenx.")

-. . -..- - / . -. - .-. -.--
def make_dendrogram(ids, **kwargs):

    model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
    model = model.fit(ids)

    if not (ax:=kwargs.pop('ax', None)):
        ax = plt.gca()

    ax.set_title("Hierarchical Clustering Dendrogram of ELM Feature Distance")
    # plot the top three levels of the dendrogram
    plot_dendrogram(model, ax=ax, **kwargs)
    ax.set_xlabel("ELM Index")

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1)
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=-10)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
make_dendrogram(ids, ax=ax1)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
tick_locations = ax1.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
ax_fake = make_dendrogram(ids, noplot=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
# make dendrogram
ax_fake = make_dendrogram(ids, no_plot=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
_, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake )

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.show()

-. . -..- - / . -. - .-. -.--
[int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
[int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()] == [int(re.findall(r'\d+', x.get_text())[0]) for x in ax1.get_xticklabels()]
-. . -..- - / . -. - .-. -.--
ax_fake.get_xticks() == ax1.get_xticks()
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=0)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5, zorder=-100)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
ax2.get_zorder()
-. . -..- - / . -. - .-. -.--
ax1.get_zorder()
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
with plt.rc_context({'lines.linewidth': 1.5}):
    make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
with plt.rc_context({'lines.linewidth': 3.5}):
    make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
plt.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
plt.show()

-. . -..- - / . -. - .-. -.--
from elm_prediction.analyze import calc_inference
from elm_prediction.options.test_arguments import TestArguments
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
import pickle
import torch
import re
from scipy.cluster.hierarchy import dendrogram
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import f1_score
from elm_prediction import package_dir
import matplotlib.pyplot as plt
from elm_prediction.src import utils

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# allow context manager for dendrogram
with plt.rc_context({'lines.linewidth': 1.5}):
    make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
fig.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
fig_fake.close()
fig.show()

-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# allow context manager for dendrogram
with plt.rc_context({'lines.linewidth': 1.5}):
    make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
fig.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
fig.show()

-. . -..- - / . -. - .-. -.--
elm_predictions = pickle.load(Path(__file__).parent/'run_dir_classification/elm_predictions.pkl')
-. . -..- - / . -. - .-. -.--
with open(Path(__file__).parent/'run_dir_classification/elm_predictions.pkl', 'r+b') as f:
    elm_predictions = pickle.load(f)

-. . -..- - / . -. - .-. -.--
ids = id_elms(elm_predictions)
-. . -..- - / . -. - .-. -.--
fig, ax = plt.subplots(1, 1, figsize=(16, 9))
ax1 = ax
ax2 = ax1.twinx()
fig_fake, ax_fake = plt.subplots(1,1)
# make dendrogram
make_dendrogram(ids, ax=ax_fake, distance_sort=True)

#get f1 score of each elm to plot
f1 = []
for elm in elm_predictions.values():
    f1.append(f1_score(elm['labels'], (elm['micro_predictions'] >= 0.4)))
f1 = np.array(f1)

#get order of elms in dendrogram
elm_idxs = [int(re.findall(r'\d+', x.get_text())[0]) for x in ax_fake.get_xticklabels()]
tick_locations = ax_fake.get_xticks()
elm_idxs, elm_loc = zip(*sorted(zip(elm_idxs, tick_locations)))

# add bar graph with f1 scores
color = 'tab:blue'
ax2.bar(elm_loc, f1, width=np.diff(tick_locations).min(), color=color, alpha=0.5)
ax2.tick_params(axis='y', color=color, labelcolor=color)

# allow context manager for dendrogram
with plt.rc_context({'lines.linewidth': 2.5}):
    make_dendrogram(ids, ax=ax1)

# Configure plot
ax1.grid(False)
ax2.grid(False)

ax1.set_ylabel('ELM Feature Distance')
ax2.set_ylabel('Model F1 Score')

ax1.set_zorder(ax2.get_zorder() + 1)
ax1.patch.set_visible(False)

plt.tight_layout()
fig.savefig(Path(__file__).parent/'run_dir_classification/plots/dendrogram.png')
plt.close(fig_fake)
fig.show()
